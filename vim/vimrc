" ----------------------------------------------------------------------------
"   Common Settings
" ----------------------------------------------------------------------------

set cpoptions+=>
set nocompatible
set noea
set undofile
set encoding=utf-8
set showbreak=-> "визуально показывать перенос длинных строк перенесенные строки будит начинаться с '-->'
set hlsearch incsearch ignorecase " поиск - подсветка, немедленное отображение, без учета регистра
set magic " For regular expressions turn magic on
set showcmd "показывает подсказку при вводе длинных команд
set showmatch "показывает парные скобки
set showmode "отображение режима
set wildmenu wcm=<Tab> " автодополнение - улучшенный режим, кнопка автодополнения
set helplang=ru "язык справки
set backspace=indent,eol,start "выбор режима работы клавиши "backspace" позволяет "backspace" удалять все
set smartindent "установка интелектуального автоматического форматирования отступов

set formatoptions=tcql "опции форматирования по умолчанию
set comments& "выставление стандартных опций комментария
set laststatus=2 "всегда отображать строку состояния
set keymap=russian-jcukenwin "добавление допалнительной раскладки
" set langmap=йq,цw,уe,кr,еt,нy,гu,шi,щo,зp,х[,ъ],фa,ыs,вd,аf,пg,рh,оj,лk,дl,э',яz,чx,сc,мv,иb,тn,ьm,б\\,,ю.,ё`,ЙQ,ЦW,УE,КR,ЕT,НY,ГU,ШI,ЩO,ЗP,Х{,Ъ},ФA,ЫS,ВD,АF,ПG,РH,ОJ,ЛK,ДL,Ж:,Э\\",ЯZ,ЧX,СC,МV,ИB,ТN,ЬM,Б\\<,Ю\\>,Ё\\~
" set langmap=ёйцукенгшщзхъфывапролджэячсмитьбюЙЦУКЕHГШЩЗХЪФЫВАПРОЛДЖЭЯЧСМИТЬБЮ\\;;`qwertyuiop[]asdfghjkl\\;’zxcvbnm\\,.QWERTYUIOP{}ASDFGHJKL:\\«ZXCVBNM$
" set langmap=ФИСВУАПРШОЛДЬТЩЗЙКЫЕГМЦЧНЯЖ;ABCDEFGHIJKLMNOPQRSTUVWXYZ:,фисвуапршолдьтщзйкыегмцчня;abcdefghijklmnopqrstuvwxyz
set iminsert=0
set imsearch=-1 "раскладка по умолчанию - английская
"set statusline=%<%f\ %m[%n]\ %{virtualenv#statusline()}\ [%H%R%Y]%=%-10.(%l,%c%V%)\ [en]\ %{&fileencoding}\ %P
set statusline=%<%f\ %m[%n]\ [%H%R%Y]%=%-10.(%l,%c%V%)\ [en]\ %{&fileencoding}\ %P "изменения формата "statusline"
set cmdheight=2 "высота командной строки
set hidden "не выгружать буферы из памяти при закрытии окна буфера
set fileencodings=utf-8,cp1251,cp866,koi8-r,utf-16le "список используемых кодировок
set title "включение изменения заголовка окна
set history=1000
set scrolloff=3
set modelines=0
set lazyredraw " Don't redraw while executing macros (good performance config)
set foldcolumn=1
set nowrap

" indent
set tabstop=4
set expandtab
set smarttab "установка вставки пробелов в начало строки вместо символа 'tabstop'
set shiftwidth=4 "установка размера таб-отступа
set shiftround
set autoindent "автоматическая табуляция. если текущая строка начинается с TAB, то и следующая тоже
set wildignore+=*/.git/*,*/.svn/*,*/node_modules/*,*/target/*,*.pyc,*.class

" без этого inotify не срабатывает
" set backupcopy=yes

set termguicolors

"показывать неполные строки не помещающиеся в экран
set display=lastline

"минимальное количество символов для горизонтальной прокрутки
set sidescroll=5

"отменяет действие "ignorecase" если шаблон находится в верхнем регистре
set smartcase

""""""""""""""""""""""""""""""""""
"""""клавиатурные сокращения""""""
""""""""""""""""""""""""""""""""""
"не использовать режим Ex, использовать Q для форматирования
map Q gq

"переключение между открытыми файлами: <Tab>, <Shift>+<Tab>
nmap <Tab>   :cclose<CR>:bnext<CR>
nmap <S-Tab> :cclose<CR>:bprevious<CR>
nmap <C-Tab> :cclose<CR>:tabnext<CR>

if has("menu")
    "меню выбора кодировки по f8
    menu Encoding.utf-8        :e ++enc=utf-8<CR>
    menu Encoding.windows-1251 :e ++enc=cp1251<CR>
    menu Encoding.utf-16le     :e ++enc=utf-16le<CR>
    menu Encoding.koi8-r 	   :e ++enc=koi8-r<CR>
    menu Encoding.ibm-866      :e ++enc=ibm866<CR>
    map <F8> :emenu Encoding.<TAB>
endif

if has("mouse")
    set mouse=a
    nmap <ScrollWheelUp> <nop>
    nmap <S-ScrollWheelUp> <nop>
    nmap <C-ScrollWheelUp> <nop>
    nmap <ScrollWheelDown> <nop>
    nmap <S-ScrollWheelDown> <nop>
    nmap <C-ScrollWheelDown> <nop>
    nmap <ScrollWheelLeft> <nop>
    nmap <S-ScrollWheelLeft> <nop>
    nmap <C-ScrollWheelLeft> <nop>
    nmap <ScrollWheelRight> <nop>
    nmap <S-ScrollWheelRight> <nop>
    nmap <C-ScrollWheelRight> <nop>
    imap <ScrollWheelUp> <nop>
    imap <S-ScrollWheelUp> <nop>
    imap <C-ScrollWheelUp> <nop>
    imap <ScrollWheelDown> <nop>
    imap <S-ScrollWheelDown> <nop>
    imap <C-ScrollWheelDown> <nop>
    imap <ScrollWheelLeft> <nop>
    imap <S-ScrollWheelLeft> <nop>
    imap <C-ScrollWheelLeft> <nop>
    imap <ScrollWheelRight> <nop>
    imap <S-ScrollWheelRight> <nop>
    imap <C-ScrollWheelRight> <nop>
    vmap <ScrollWheelUp> <nop>
    vmap <S-ScrollWheelUp> <nop>
    vmap <C-ScrollWheelUp> <nop>
    vmap <ScrollWheelDown> <nop>
    vmap <S-ScrollWheelDown> <nop>
    vmap <C-ScrollWheelDown> <nop>
    vmap <ScrollWheelLeft> <nop>
    vmap <S-ScrollWheelLeft> <nop>
    vmap <C-ScrollWheelLeft> <nop>
    vmap <ScrollWheelRight> <nop>
    vmap <S-ScrollWheelRight> <nop>
    vmap <C-ScrollWheelRight> <nop>
    "отключение мыши
endif

if has("syntax")
    syntax on
    syntax sync minlines=10000
endif

if has("eval")
    let mapleader="\<SPACE>"

    filetype off
    filetype plugin indent on

    " ----------------------------------------------------------------------------
    "   Plug
    " ----------------------------------------------------------------------------
    if empty(glob('~/.vim/autoload/plug.vim'))
        silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
            \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
        autocmd VimEnter * PlugInstall | source $MYVIMRC
    endif

    call plug#begin('~/.vim/plugged')

    " Plug 'dense-analysis/ale'
    if 0
        Plug 'dense-analysis/ale'

        let g:ale_completion_enabled = 1
        let g:ale_rust_rls_toolchain = 'stable-x86_64-unknown-linux-gnu'
        let g:ale_linters = {
        \   'typescript': ['tsserver'],
        \   'go': ['gofmt', 'go vet', 'gopls'],
        \   'rust': ['rls', 'cargo']
        \}
        let g:ale_fixers = {
        \ 'go': ['goimports']
        \ }
        let g:ale_fix_on_save = 1

        nmap K :ALEHover<CR>
        nmap gd :ALEGoToDefinition<CR>
        nmap gy :ALEGoToTypeDefinition<CR>
        nmap <C-k> :ALEPreviousWrap<CR>
        nmap <C-j> :ALENextWrap<CR>
        nmap <leader>rn :ALERename<CR>
    else
        Plug 'neovim/nvim-lspconfig'
        Plug 'hrsh7th/nvim-compe'

        " nnoremap <silent> gd <cmd>lua vim.lsp.buf.definition()<CR>
        " nnoremap <silent> gD <cmd>lua vim.lsp.buf.declaration()<CR>
        " nnoremap <silent> gr <cmd>lua vim.lsp.buf.references()<CR>
        " nnoremap <silent> gi <cmd>lua vim.lsp.buf.implementation()<CR>
        " nnoremap <silent> K <cmd>lua vim.lsp.buf.hover()<CR>
        " nnoremap <silent> <C-k> <cmd>lua vim.diagnostic.goto_prev()<CR>
        " nnoremap <silent> <C-j> <cmd>lua vim.diagnostic.goto_next()<CR>
    endif

    Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}

    Plug 'jparise/vim-graphql'
    Plug 'hashivim/vim-terraform'
    Plug 'LnL7/vim-nix'
    Plug 'wsdjeg/vim-fetch'

    Plug 'tpope/vim-abolish' " cases modifications
    Plug 'tpope/vim-sensible'
    Plug 'iCyMind/NeoSolarized'
    Plug 'easymotion/vim-easymotion'
    Plug 'sjl/gundo.vim'
    Plug 'mileszs/ack.vim'
    Plug 'scrooloose/nerdcommenter'
    " Plug 'SirVer/ultisnips'
    Plug 'honza/vim-snippets'

    Plug 'leafgarland/typescript-vim'
    Plug 'pangloss/vim-javascript'

    Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
    Plug 'junegunn/fzf.vim'
    Plug 'stephpy/vim-yaml'

    " go
    Plug 'cespare/vim-go-templates'
    Plug 'b0o/builder.vim'
    Plug 'b0o/quicktemplate.vim'

    " uml
    Plug 'weirongxu/plantuml-previewer.vim'
    Plug 'tyru/open-browser.vim'
    Plug 'aklt/plantuml-syntax'

    " colorscheme
    Plug 'morhetz/gruvbox'

    filetype plugin indent on                   " required!
    call plug#end()

    " ----------------------------------------------------------------------------
    "   Plugins Settings
    " ----------------------------------------------------------------------------
    " Plug 'fatih/vim-go'
    let g:go_fmt_command = "goimports"

    " " Plug 'statico/vim-javascript-sql'
    " let g:javascript_sql_dialect = 'pgsql'

    " Plug 'SirVer/ultisnips'
    let g:UltiSnipsExpandTrigger="<tab>"
    let g:UltiSnipsJumpForwardTrigger="<c-b>"
    let g:UltiSnipsJumpBackwardTrigger="<c-z>"

    " Plug 'easymotion/vim-easymotion'
    let g:EasyMotion_do_mapping = 0 " Disable default mappings
    let g:EasyMotion_smartcase = 1
    nmap s <Plug>(easymotion-s2)
    map <Leader>j <Plug>(easymotion-j)
    map <Leader>k <Plug>(easymotion-k)

    " Plug 'junegunn/fzf.vim'
    nnoremap <C-P> :GFiles --cached --others --exclude-standard<cr>
    nnoremap <C-B> :Buffers<cr>
    nnoremap <Leader>b :Buffers<cr>
    nnoremap <Leader>h :History<cr>
    imap <c-x><c-f> <plug>(fzf-complete-file)

    if has("win32")
        set dir=~/_vimfiles/swaps/
        set undodir=~/_vimfiles/undos/
        lan mes en
    else
        set dir=~/.vim/swaps/
        set undodir=~/.vim/undos/
        set t_Co=256
    endif

    set background=dark
    colorscheme gruvbox
    " if has("gui_running")
    "     set background=light
    "     set guioptions-=T
    "     set guioptions-=m
    "     if has("gui_gtk2")
    "         set guifont=Source\ Code\ Pro\ Medium\ 10
    "     elseif has("gui_macvim")
    "         set guifont=Menlo\ Regular:h14
    "     elseif has("gui_win32")
    "         set guifont=Source_Code_Pro:h11:cRUSSIAN
    "     endif
    " else
    "     colorscheme slate
    " endif

    "изменение цвета "statusline" по умолчанию
    highlight StatusLine ctermfg=DarkGreen guifg=DarkGreen

    "вызов функции изменения "statusline"
    nmap <silent> <F7> :call ChLang()<cr>
    imap <silent> <F7> <Left><Right><C-O>:call ChLang()<cr>

    "функция для изменения "statusline" при изменении раскладки
    function! ChLang()
        let str=substitute(&statusline, '\ ', '\\ ','g')
        if &iminsert==0
            highlight StatusLine ctermfg=DarkBlue guifg=DarkBlue
            let str=substitute(str,'\[en\]', '[ru]','')
            exec "set iminsert=1 statusline=".str
        else
            highlight StatusLine ctermfg=DarkGreen guifg=DarkGreen
            let str=substitute(str,'\[ru\]', '[en]','')
            exec "set iminsert=0 statusline=".str
        endif
    endfunction

    "замена непечатаемых символов в режиме "list"
    if &listchars ==# 'eol:$'
        set listchars=tab:>\ ,trail:-,extends:>,precedes:<,nbsp:+
    endif
    " Show problematic characters.
    set list

    function! CueMakeTitle()
        %s#FILE\s\+".\+\\\d\d\s\?-\s\?\(.\+\).\(wav\|flac\)"\s\+WAVE#\0    TITLE "\1"#
    endfunction
endif

if has("autocmd")
    autocmd FileType * set nonumber linebreak foldcolumn=0

    autocmd FileType go set listchars=tab:\ \ ,trail:-,extends:>,precedes:<,nbsp:+
    " autocmd FileType go nmap <leader>b  <Plug>(go-build)
    " autocmd FileType go nmap <leader>c  <Plug>(go-build)
    " autocmd FileType go nmap <leader>g  <Plug>(go-generate)
    " autocmd FileType go nmap <leader>e  <Plug>(go-iferr)
    " autocmd FileType go nmap <F2>  <Plug>(go-rename)
    " autocmd FileType go nmap K  <Plug>(go-info)

    autocmd FileType c,cpp set cindent 
        \formatoptions=croql comments=sr:/*,mb:*,ex:*/,:// number textwidth=41
        \ nowrap number

    if has("eval")
        autocmd FileType perl set number nowrap foldlevel=50 foldcolumn=3
            let perl_fold=1
            let perl_fold_blocks=1
        autocmd! BufEnter *.pl compiler perl
    endif

    autocmd FileType php set number nowrap foldlevel=50 foldcolumn=3

    autocmd FileType python setlocal colorcolumn=120

    " переходить к последней позиции в файле
    autocmd BufReadPost * 
        \ if line("'\"") > 0 && line("'\"") <= line("$") | 
        \   exe "normal g`\"" | 
        \ endif 

    " gotpl
    autocmd BufNewFile,BufReadPost *.tpl setfiletype gotpl

    " outline
    autocmd BufNewFile,BufReadPost *.otl setfiletype votl
    autocmd BufReadPre,BufNewFile auth.otl 
        \ setlocal noswapfile foldlevel=1 "viminfo=""
    autocmd BufRead,BufNewFile auth.otl 
        \ setlocal foldlevel=1

    " исключение буферов quickfix из listed
    augroup qf
        autocmd!
        autocmd FileType qf set nobuflisted
    augroup END
endif

let @d = "console.warn(require('components/_common/persistence/sql').stringifyStatement(stmt))"
let @f = "for (let i=0; i<100; i++) {"
